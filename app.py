# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'app-ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# Setup 
# git clone https://github.com/ultralytics/yolov5 
# Download models in models folder

import subprocess
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
import os
import shutil
import time

import sys

if os.name == "posix":
    machine_os = "mac"

elif os.name != "posix":
    machine_os = "windows"

main_path = os.path.dirname(os.path.abspath(__file__)) + os.sep
models_path = f"{main_path}models/"
mac_commands_path = f"{main_path}Mac/"
win_commands_path = f"{main_path}Windows/"

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(570, 663)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.graphicsView = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView.setGeometry(QtCore.QRect(20, 120, 351, 211))
        self.graphicsView.setObjectName("graphicsView")
        self.browseBtn = QtWidgets.QPushButton(self.centralwidget)
        self.browseBtn.setGeometry(QtCore.QRect(20, 70, 113, 41))
        self.browseBtn.setObjectName("browseBtn")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(140, 80, 411, 21))
        self.label.setAutoFillBackground(False)
        self.label.setObjectName("label")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(0, 0, 571, 61))
        self.frame.setStyleSheet("background-color: rgb(237, 170, 70);")
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(20, 10, 531, 41))
        font = QtGui.QFont()
        font.setFamily("Futura")
        font.setPointSize(36)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: white;")
        self.label_2.setObjectName("label_2")

        # Small Button
        self.translateBtnSmall = QtWidgets.QPushButton(self.centralwidget)
        self.translateBtnSmall.setGeometry(QtCore.QRect(400, 120, 141, 51))
        self.translateBtnSmall.setObjectName("translateBtnSmall")
        self.translateBtnSmall.clicked.connect(self.small_detect_button_clicked)

        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(20, 350, 51, 16))
        self.label_3.setObjectName("label_3")
        self.graphicsView_2 = QtWidgets.QGraphicsView(self.centralwidget)
        self.graphicsView_2.setGeometry(QtCore.QRect(20, 380, 521, 241))
        self.graphicsView_2.setObjectName("graphicsView_2")
        self.translateBtnMedium = QtWidgets.QPushButton(self.centralwidget)

        # Medium Button
        self.translateBtnMedium.setGeometry(QtCore.QRect(400, 200, 141, 51))
        self.translateBtnMedium.setObjectName("translateBtnMedium")
        self.translateBtnMedium.clicked.connect(self.medium_detect_button_clicked)

        # Large Button
        self.translateBtnLarge = QtWidgets.QPushButton(self.centralwidget)
        self.translateBtnLarge.setGeometry(QtCore.QRect(400, 280, 141, 51))
        self.translateBtnLarge.setObjectName("translateBtnLarge")
        self.translateBtnLarge.clicked.connect(self.large_detect_button_clicked)

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Connect the browse button to a function
        self.browseBtn.clicked.connect(self.browse_image)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Motorcycle Low Light Detection"))
        self.browseBtn.setText(_translate("MainWindow", "BROWSE"))
        self.label.setText(_translate("MainWindow", ""))
        self.label_2.setText(_translate("MainWindow", "Motorcycle Low Light Detection"))
        self.translateBtnSmall.setText(_translate("MainWindow", "DETECT (Small)"))
        self.label_3.setText(_translate("MainWindow", "RESULT"))
        self.translateBtnMedium.setText(_translate("MainWindow", "DETECT (Medium)"))
        self.translateBtnLarge.setText(_translate("MainWindow", "DETECT (Large)"))

    def browse_image(self):
        file_dialog = QFileDialog()
        file_path, _ = file_dialog.getOpenFileName(None, "Select Image", "", "Image Files (*.png *.jpg *.jpeg)")
        self.file_path_global = file_path
        filename = os.path.basename(file_path)
        self.filename=filename

        try:
            # Delete the "yolov7/runs" folder
            runs_folder = os.path.join(os.path.dirname(os.path.realpath(__file__)), "yolov5", "runs")
            shutil.rmtree(runs_folder)
        except:
            pass

        if file_path:
            # Save the selected image as 1.jpg in the yolov5 folder
            save_path = os.path.join(os.path.dirname(os.path.realpath(__file__)), "yolov5", "1.jpg")
            shutil.copy(file_path, save_path)

            self.label.setText(file_path)
            self.show_image(file_path)

        if file_path:
            self.label.setText(file_path)
            self.show_image(file_path)
            
    def show_image(self, image_path):
        image = QtGui.QPixmap(image_path)
        scaled_image = image.scaled(self.graphicsView.size(), QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation)

        scene = QtWidgets.QGraphicsScene()
        scene.addPixmap(scaled_image)

        self.graphicsView.setScene(scene)
        self.graphicsView.fitInView(scene.sceneRect(), QtCore.Qt.KeepAspectRatio)
        self.graphicsView.centerOn(scene.sceneRect().center())

    def small_detect_button_clicked(self):

        if machine_os == "windows":
            process = subprocess.Popen(['open', f'{win_commands_path}Detect_Small.bat'])
        elif machine_os == "mac":
            process = subprocess.Popen(['open', f'{mac_commands_path}Detect_Small'])

        process.wait()  # Wait for the process to finish

        time.sleep(10)

        # Once the process finishes, show the image in graphicsView_2
        current_directory = os.getcwd()
        current_directory = current_directory + "/yolov5/runs/detect/exp/"

        detection_image_dir = current_directory + '1.jpg'
        self.show_detection(detection_image_dir)

    def medium_detect_button_clicked(self):

        if machine_os == "windows":
            process = subprocess.Popen(['open', f'{win_commands_path}Detect_Medium.bat'])
        elif machine_os == "mac":
            process = subprocess.Popen(['open', f'{mac_commands_path}Detect_Medium'])
    
        process.wait()  # Wait for the process to finish

        time.sleep(10)

        # Once the process finishes, show the image in graphicsView_2
        current_directory = os.getcwd()
        current_directory = current_directory + "/yolov5/runs/detect/exp/"

        detection_image_dir = current_directory + '1.jpg'
        self.show_detection(detection_image_dir)

    def large_detect_button_clicked(self):

        if machine_os == "windows":
            process = subprocess.Popen(['open', f'{win_commands_path}Detect_Large.bat'])
        elif machine_os == "mac":
            process = subprocess.Popen(['open', f'{mac_commands_path}Detect_Large'])

        process.wait()  # Wait for the process to finish

        time.sleep(10)

        # Once the process finishes, show the image in graphicsView_2
        current_directory = os.getcwd()
        current_directory = current_directory + "/yolov5/runs/detect/exp/"

        detection_image_dir = current_directory + '1.jpg'
        self.show_detection(detection_image_dir)

    def show_detection(self, image_path):

        image = QtGui.QPixmap(image_path)
        scaled_image = image.scaled(self.graphicsView.size(), QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation)

        scene = QtWidgets.QGraphicsScene()
        scene.addPixmap(scaled_image)

        self.graphicsView_2.setScene(scene)
        self.graphicsView_2.fitInView(scene.sceneRect(), QtCore.Qt.KeepAspectRatio)
        self.graphicsView_2.centerOn(scene.sceneRect().center())

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
